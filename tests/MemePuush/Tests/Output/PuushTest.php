<?php
namespace MemePuush\Tests\Output;


use MemePuush\Output\Puush;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-07 at 00:12:45.
 *
 * @covers MemePuush\Output\Puush
 */
class PuushTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Puush
     */
    protected $object;

    /**
     * @covers MemePuush\Output\Puush::__construct
     */
    protected function setUp()
    {
        $this->object = new Puush( 'test' );
    }

    /**
     * @covers MemePuush\Output\Puush::setApiKey
     */
    public function testSetApiKey()
    {
        $this->object->setApiKey( 'new-test' );

        $this->assertEquals( 'new-test', $this->object->getApiKey() );
    }

    /**
     * @covers MemePuush\Output\Puush::getApiKey
     */
    public function testGetApiKey()
    {
        $this->assertEquals( 'test', $this->object->getApiKey() );
    }

    /**
     * @covers MemePuush\Output\Puush::getOutputPath
     */
    public function testGetOutputPath()
    {
        $this->assertNull( $this->object->getOutputPath() );
    }

    /**
     * @covers MemePuush\Output\Puush::upload
     */
    public function testUploadSuccess()
    {
        $response = $this->getMock( '\Guzzle\Http\Message\Response', array( 'getBody', 'getStatusCode' ), array( 200 ) );
        $response->expects( $this->once() )->method( 'getStatusCode' )->will( $this->returnValue( 200 ) );
        $response->expects( $this->once() )->method( 'getBody' )->will( $this->returnValue( '0,http://localhost.com/123.jpg,123123,10000' ) );

        $request = $this->getMock( '\Guzzle\Http\Message\Request', array( 'send' ), array( 'POST', 'http://localhost' ) );
        $request->expects( $this->once() )->method( 'send' )->will( $this->returnValue( $response ) );

        //set up mock client
        $client = $this->getMock( '\Guzzle\Http\Client', array( 'get', 'post' ), array( 'http://localhost' ) );
        $client->expects( $this->once() )->method( 'post' )->will( $this->returnValue( $request ) );

        $this->object->setHttpClient( $client );

        $imagick = $this->getMock( 'Imagick', array( 'writeImage' ) );

        $this->object->upload( $imagick );

        $this->assertEquals( 'http://localhost.com/123.jpg', $this->object->getOutputPath() );
    }

    /**
     * @covers MemePuush\Output\Puush::upload
     */
    public function testUploadFailure()
    {
        $response = $this->getMock( '\Guzzle\Http\Message\Response', array( 'getBody', 'getStatusCode' ), array( 200 ) );
        $response->expects( $this->once() )->method( 'getStatusCode' )->will( $this->returnValue( 200 ) );
        $response->expects( $this->once() )->method( 'getBody' )->will( $this->returnValue( '-1' ) );

        $request = $this->getMock( '\Guzzle\Http\Message\Request', array( 'send' ), array( 'POST', 'http://localhost' ) );
        $request->expects( $this->once() )->method( 'send' )->will( $this->returnValue( $response ) );

        //set up mock client
        $client = $this->getMock( '\Guzzle\Http\Client', array( 'get', 'post' ), array( 'http://localhost' ) );
        $client->expects( $this->once() )->method( 'post' )->will( $this->returnValue( $request ) );

        $this->object->setHttpClient( $client );

        $imagick = $this->getMock( 'Imagick', array( 'writeImage' ) );

        $this->object->upload( $imagick );

        $this->assertEquals( '', $this->object->getOutputPath() );
    }

    /**
     * @covers MemePuush\Output\Puush::upload
     * @expectedException \Exception
     */
    public function testUploadException()
    {
        $response = $this->getMock( '\Guzzle\Http\Message\Response', array( 'getBody', 'getStatusCode' ), array( 200 ) );
        $response->expects( $this->atLeastOnce() )->method( 'getStatusCode' )->will( $this->returnValue( 500 ) );

        $request = $this->getMock( '\Guzzle\Http\Message\Request', array( 'send' ), array( 'POST', 'http://localhost' ) );
        $request->expects( $this->once() )->method( 'send' )->will( $this->returnValue( $response ) );

        //set up mock client
        $client = $this->getMock( '\Guzzle\Http\Client', array( 'get', 'post' ), array( 'http://localhost' ) );
        $client->expects( $this->once() )->method( 'post' )->will( $this->returnValue( $request ) );

        $this->object->setHttpClient( $client );

        $imagick = $this->getMock( 'Imagick', array( 'writeImage' ) );

        $this->object->upload( $imagick );
    }
}
