<?php
namespace MemePuush\Tests;


use MemePuush\Caption;
use MemePuush\Image;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-07 at 00:11:07.
 */
class CaptionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Image
     */
    protected $image;

    /**
     * @covers MemePuush\Caption::__construct
     * @covers MemePuush\Caption::setLocation
     * @covers MemePuush\Caption::setText
     */
    protected function setUp()
    {
        $this->image = new Image();
        $imagick     = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 480, 'height' => 640 ) ) );

        $this->image->setImage( $imagick );
    }

    /**
     * @covers MemePuush\Caption::isEmpty
     */
    public function testIsEmpty()
    {
        $object = new Caption( $this->image, '' );
        $this->assertTrue( $object->isEmpty() );

        $object = new Caption( $this->image, 'test' );
        $this->assertFalse( $object->isEmpty() );
    }

    /**
     * @covers MemePuush\Caption::getLocation
     */
    public function testGetLocation()
    {
        $object = new Caption( $this->image, '', 'top' );
        $this->assertEquals( 'top', $object->getLocation() );

        $object = new Caption( $this->image, 'test', 'bottom' );
        $this->assertEquals( 'bottom', $object->getLocation() );
    }

    /**
     * @covers MemePuush\Caption::getText
     */
    public function testGetText()
    {
        $object = new Caption( $this->image, '' );
        $this->assertEquals( '', $object->getText() );

        $object = new Caption( $this->image, 'test' );
        $this->assertEquals( 'TEST', $object->getText() );

        $object = new Caption( $this->image, 'mix OF cases and 28271!' );
        $this->assertEquals( 'MIX OF CASES AND 28271!', $object->getText() );
    }

    /**
     * @covers MemePuush\Caption::getStringLength
     */
    public function testGetStringLength()
    {
        $object = new Caption( $this->image, '' );
        $this->assertEquals( 0, $object->getStringLength() );

        $object = new Caption( $this->image, 'test' );
        $this->assertEquals( 4, $object->getStringLength() );

        $object = new Caption( $this->image, 'mix OF cases and 28271!' );
        $this->assertEquals( 23, $object->getStringLength() );
    }

    /**
     * @covers MemePuush\Caption::setFontPath
     * @covers MemePuush\Caption::getFontPath
     */
    public function testSetGetFontPath()
    {
        $object = new Caption( $this->image, '' );
        $object->setFontPath( '/path/to/nowhere' );
        $this->assertEquals( '/path/to/nowhere', $object->getFontPath() );
    }

    /**
     * @covers MemePuush\Caption::getFontSize
     */
    public function testGetFontSize()
    {
        $object = new Caption( $this->image, '' );
        $this->assertEquals( 0, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::getBoundingBox
     */
    public function testGetBoundingBoxDefaultTop()
    {
        $object = new Caption( $this->image, 'test' );

        //validate the default with no image dimensions
        $expected = array(
            'x1'     => 2,
            'x2'     => 478,
            'x'      => 240,
            'width'  => 480,
            'y1'     => 2,
            'y2'     => 158,
            'y'      => 10,
            'height' => 160
        );

        $this->assertEquals( $expected, $object->getBoundingBox() );
    }

    /**
     * @covers MemePuush\Caption::getBoundingBox
     */
    public function testGetBoundingBoxDefaultBottom()
    {
        $object = new Caption( $this->image, 'test', 'bottom' );

        //validate the default with no image dimensions
        $expected = array(
            'x1'     => 2,
            'x2'     => 478,
            'x'      => 240,
            'width'  => 480,
            'y1'     => 478,
            'y2'     => 638,
            'y'      => 478,
            'height' => 160
        );

        $this->assertEquals( $expected, $object->getBoundingBox() );
    }

    /**
     * @covers MemePuush\Caption::getDrawLayer
     * @covers MemePuush\Caption::setDraw
     * @covers MemePuush\Caption::getDraw
     * @covers MemePuush\Caption::setPixel
     * @covers MemePuush\Caption::getPixel
     * @covers MemePuush\Caption::setGravity
     * @covers MemePuush\Caption::getGravity
     */
    public function testGetDrawLayer()
    {
        $object = new Caption( $this->image, 'twelve' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $drawLayer = $object->getDrawLayer();

        $this->assertEquals( $draw, $drawLayer );
    }

    /**
     * @covers MemePuush\Caption::annotateImage
     * @todo   Implement testAnnotateImage().
     */
    public function testAnnotateImage()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
