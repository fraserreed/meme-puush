<?php
namespace MemePuush\Tests;


use MemePuush\Caption;
use MemePuush\Image;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-07 at 00:11:07.
 *
 * @covers MemePuush\Caption
 */
class CaptionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Image
     */
    protected $image;

    /**
     * @covers MemePuush\Caption::__construct
     * @covers MemePuush\Caption::setLocation
     * @covers MemePuush\Caption::setText
     */
    protected function setUp()
    {
        $this->image = new Image();
        $imagick     = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 480, 'height' => 640 ) ) );

        $this->image->setImage( $imagick );
    }

    /**
     * @covers MemePuush\Caption::isEmpty
     */
    public function testIsEmpty()
    {
        $object = new Caption( $this->image, '' );
        $this->assertTrue( $object->isEmpty() );

        $object = new Caption( $this->image, 'test' );
        $this->assertFalse( $object->isEmpty() );
    }

    /**
     * @covers MemePuush\Caption::getLocation
     */
    public function testGetLocation()
    {
        $object = new Caption( $this->image, '', 'top' );
        $this->assertEquals( 'top', $object->getLocation() );

        $object = new Caption( $this->image, 'test', 'bottom' );
        $this->assertEquals( 'bottom', $object->getLocation() );
    }

    /**
     * @covers MemePuush\Caption::getText
     */
    public function testGetText()
    {
        $object = new Caption( $this->image, '' );
        $this->assertEquals( '', $object->getText() );

        $object = new Caption( $this->image, 'test' );
        $this->assertEquals( 'TEST', $object->getText() );

        $object = new Caption( $this->image, 'mix OF cases and 28271!' );
        $this->assertEquals( 'MIX OF CASES AND 28271!', $object->getText() );
    }

    /**
     * @covers MemePuush\Caption::getStringLength
     */
    public function testGetStringLength()
    {
        $object = new Caption( $this->image, '' );
        $this->assertEquals( 0, $object->getStringLength() );

        $object = new Caption( $this->image, 'test' );
        $this->assertEquals( 4, $object->getStringLength() );

        $object = new Caption( $this->image, 'mix OF cases and 28271!' );
        $this->assertEquals( 23, $object->getStringLength() );
    }

    /**
     * @covers MemePuush\Caption::setFontPath
     * @covers MemePuush\Caption::getFontPath
     */
    public function testSetGetFontPath()
    {
        $object = new Caption( $this->image, '' );
        $object->setFontPath( '/path/to/nowhere' );
        $this->assertEquals( '/path/to/nowhere', $object->getFontPath() );
    }

    /**
     * @covers MemePuush\Caption::getFontSize
     */
    public function testGetFontSize()
    {
        $object = new Caption( $this->image, '' );
        $this->assertEquals( 0, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::getBoundingBox
     */
    public function testGetBoundingBoxDefaultTop()
    {
        $object = new Caption( $this->image, 'test' );

        //validate the default with no image dimensions
        $expected = array(
            'x1'     => 2,
            'x2'     => 478,
            'x'      => 240,
            'width'  => 480,
            'y1'     => 2,
            'y2'     => 158,
            'y'      => 10,
            'height' => 160
        );

        $this->assertEquals( $expected, $object->getBoundingBox() );
    }

    /**
     * @covers MemePuush\Caption::getBoundingBox
     */
    public function testGetBoundingBoxDefaultBottom()
    {
        $object = new Caption( $this->image, 'test', 'bottom' );

        //validate the default with no image dimensions
        $expected = array(
            'x1'     => 2,
            'x2'     => 478,
            'x'      => 240,
            'width'  => 480,
            'y1'     => 478,
            'y2'     => 638,
            'y'      => 478,
            'height' => 160
        );

        $this->assertEquals( $expected, $object->getBoundingBox() );
    }

    /**
     * @covers MemePuush\Caption::getDrawLayer
     * @covers MemePuush\Caption::setDraw
     * @covers MemePuush\Caption::getDraw
     * @covers MemePuush\Caption::setPixel
     * @covers MemePuush\Caption::getPixel
     * @covers MemePuush\Caption::setGravity
     * @covers MemePuush\Caption::getGravity
     * @covers MemePuush\Caption::calculateFontSize
     */
    public function testGetDrawLayer480x640()
    {
        $object = new Caption( $this->image, 'twelve' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $drawLayer = $object->getDrawLayer();

        $this->assertEquals( $draw, $drawLayer );
        $this->assertEquals( 66, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::getDrawLayer
     * @covers MemePuush\Caption::setDraw
     * @covers MemePuush\Caption::getDraw
     * @covers MemePuush\Caption::setPixel
     * @covers MemePuush\Caption::getPixel
     * @covers MemePuush\Caption::setGravity
     * @covers MemePuush\Caption::getGravity
     * @covers MemePuush\Caption::calculateFontSize
     */
    public function testGetDrawLayerFontSize632x679()
    {
        $image   = new Image();
        $imagick = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 632, 'height' => 679 ) ) );

        $properties = array(
            '{"characterWidth":1,"characterHeight":1,"ascender":2,"descender":-1,"textWidth":18,"textHeight":1,"maxHorizontalAdvance":1,"boundingBox":{"x1":0,"y1":-0.015625,"x2":0.546875,"y2":0.8125},"originX":18,"originY":0}',
            '{"characterWidth":27,"characterHeight":27,"ascender":28,"descender":-6,"textWidth":176,"textHeight":33,"maxHorizontalAdvance":35,"boundingBox":{"x1":0,"y1":0,"x2":13.5,"y2":21},"originX":176,"originY":0}',
            '{"characterWidth":30,"characterHeight":30,"ascender":31,"descender":-7,"textWidth":194,"textHeight":37,"maxHorizontalAdvance":39,"boundingBox":{"x1":0,"y1":0,"x2":16.5,"y2":24},"originX":194,"originY":0}',
            '{"characterWidth":33,"characterHeight":33,"ascender":34,"descender":-7,"textWidth":212,"textHeight":40,"maxHorizontalAdvance":42,"boundingBox":{"x1":0,"y1":0,"x2":17.5,"y2":26},"originX":212,"originY":0}',
            '{"characterWidth":36,"characterHeight":36,"ascender":37,"descender":-8,"textWidth":232,"textHeight":44,"maxHorizontalAdvance":46,"boundingBox":{"x1":0,"y1":0,"x2":19.5,"y2":28},"originX":232,"originY":0}',
            '{"characterWidth":39,"characterHeight":39,"ascender":40,"descender":-9,"textWidth":249,"textHeight":48,"maxHorizontalAdvance":50,"boundingBox":{"x1":0,"y1":0,"x2":21.5,"y2":31},"originX":249,"originY":0}',
            '{"characterWidth":41,"characterHeight":41,"ascender":42,"descender":-9,"textWidth":261,"textHeight":50,"maxHorizontalAdvance":53,"boundingBox":{"x1":0,"y1":0,"x2":22.5,"y2":32},"originX":261,"originY":0}',
            '{"characterWidth":43,"characterHeight":43,"ascender":44,"descender":-10,"textWidth":275,"textHeight":52,"maxHorizontalAdvance":55,"boundingBox":{"x1":0,"y1":0,"x2":23.5,"y2":34},"originX":275,"originY":0}',
            '{"characterWidth":45,"characterHeight":45,"ascender":46,"descender":-10,"textWidth":287,"textHeight":55,"maxHorizontalAdvance":58,"boundingBox":{"x1":0,"y1":-1,"x2":23.5,"y2":37},"originX":287,"originY":0}',
            '{"characterWidth":47,"characterHeight":47,"ascender":48,"descender":-10,"textWidth":298,"textHeight":57,"maxHorizontalAdvance":60,"boundingBox":{"x1":0,"y1":-1,"x2":25.5,"y2":38},"originX":298,"originY":0}',
            '{"characterWidth":49,"characterHeight":49,"ascender":50,"descender":-11,"textWidth":311,"textHeight":60,"maxHorizontalAdvance":63,"boundingBox":{"x1":0,"y1":-1,"x2":25.5,"y2":40},"originX":311,"originY":0}',
            '{"characterWidth":51,"characterHeight":51,"ascender":52,"descender":-11,"textWidth":323,"textHeight":62,"maxHorizontalAdvance":66,"boundingBox":{"x1":0,"y1":-1,"x2":27.5,"y2":41},"originX":323,"originY":0}',
            '{"characterWidth":53,"characterHeight":53,"ascender":54,"descender":-12,"textWidth":333,"textHeight":65,"maxHorizontalAdvance":68,"boundingBox":{"x1":0,"y1":-1,"x2":29.5,"y2":43},"originX":333,"originY":0}',
            '{"characterWidth":55,"characterHeight":55,"ascender":56,"descender":-12,"textWidth":348,"textHeight":67,"maxHorizontalAdvance":71,"boundingBox":{"x1":0,"y1":-1,"x2":30.5,"y2":44},"originX":348,"originY":0}',
            '{"characterWidth":57,"characterHeight":57,"ascender":58,"descender":-13,"textWidth":360,"textHeight":70,"maxHorizontalAdvance":73,"boundingBox":{"x1":0,"y1":-1,"x2":32.5,"y2":46},"originX":360,"originY":0}',
            '{"characterWidth":59,"characterHeight":59,"ascender":60,"descender":-13,"textWidth":374,"textHeight":72,"maxHorizontalAdvance":76,"boundingBox":{"x1":0,"y1":-1,"x2":32.5,"y2":48},"originX":374,"originY":0}',
            '{"characterWidth":61,"characterHeight":61,"ascender":62,"descender":-13,"textWidth":385,"textHeight":74,"maxHorizontalAdvance":78,"boundingBox":{"x1":0,"y1":-1,"x2":34.5,"y2":49},"originX":385,"originY":0}',
            '{"characterWidth":63,"characterHeight":63,"ascender":64,"descender":-14,"textWidth":397,"textHeight":77,"maxHorizontalAdvance":81,"boundingBox":{"x1":0,"y1":-1,"x2":34.5,"y2":51},"originX":397,"originY":0}',
            '{"characterWidth":65,"characterHeight":65,"ascender":66,"descender":-14,"textWidth":411,"textHeight":79,"maxHorizontalAdvance":83,"boundingBox":{"x1":0,"y1":-1,"x2":36.5,"y2":52},"originX":411,"originY":0}',
            '{"characterWidth":67,"characterHeight":67,"ascender":68,"descender":-15,"textWidth":423,"textHeight":82,"maxHorizontalAdvance":86,"boundingBox":{"x1":0,"y1":-1,"x2":36.5,"y2":54},"originX":423,"originY":0}',
            '{"characterWidth":69,"characterHeight":69,"ascender":70,"descender":-15,"textWidth":435,"textHeight":84,"maxHorizontalAdvance":89,"boundingBox":{"x1":0,"y1":-1,"x2":38.5,"y2":56},"originX":435,"originY":0}'
        );

        foreach( $properties as $i => $returnVal )
        {
            $imagick->expects( $this->at( $i + 1 ) )->method( 'queryFontMetrics' )->will(
                $this->returnValue( json_decode( $returnVal, true ) ) );
        }
        $image->setImage( $imagick );

        $object = new Caption( $image, 'Soup Kitchens' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $drawLayer = $object->getDrawLayer();

        $this->assertEquals( $draw, $drawLayer );
        $this->assertEquals( 71, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::getDrawLayer
     * @covers MemePuush\Caption::setDraw
     * @covers MemePuush\Caption::getDraw
     * @covers MemePuush\Caption::setPixel
     * @covers MemePuush\Caption::getPixel
     * @covers MemePuush\Caption::setGravity
     * @covers MemePuush\Caption::getGravity
     * @covers MemePuush\Caption::calculateFontSize
     */
    public function testGetDrawLayerFontSize632x679WordWrap()
    {
        $image   = new Image();
        $imagick = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 632, 'height' => 679 ) ) );

        $properties = array(
            '{"characterWidth":1,"characterHeight":1,"ascender":2,"descender":-1,"textWidth":184,"textHeight":1,"maxHorizontalAdvance":1,"boundingBox":{"x1":0,"y1":-0.015625,"x2":0.8125,"y2":0.8125},"originX":183.75,"originY":0}',
            '{"characterWidth":3,"characterHeight":3,"ascender":4,"descender":-1,"textWidth":334.015625,"textHeight":4,"maxHorizontalAdvance":4,"boundingBox":{"x1":-0.015625,"y1":-0.046875,"x2":2.4375,"y2":2.421875},"originX":333.75,"originY":0}',
            '{"characterWidth":5,"characterHeight":5,"ascender":6,"descender":-2,"textWidth":453.03125,"textHeight":6,"maxHorizontalAdvance":6,"boundingBox":{"x1":-0.03125,"y1":-0.078125,"x2":4.078125,"y2":4.03125},"originX":452.75,"originY":0}',
            '{"characterWidth":7,"characterHeight":7,"ascender":8,"descender":-2,"textWidth":574.046875,"textHeight":9,"maxHorizontalAdvance":9,"boundingBox":{"x1":-0.046875,"y1":-0.109375,"x2":5.703125,"y2":5.65625},"originX":573.75,"originY":0}',
            '{"characterWidth":8,"characterHeight":8,"ascender":9,"descender":-2,"textWidth":595.046875,"textHeight":10,"maxHorizontalAdvance":10,"boundingBox":{"x1":-0.046875,"y1":-0.140625,"x2":6.515625,"y2":6.453125},"originX":593.75,"originY":0}',
            '{"characterWidth":9,"characterHeight":9,"ascender":10,"descender":-2,"textWidth":714,"textHeight":11,"maxHorizontalAdvance":12,"boundingBox":{"x1":0,"y1":0,"x2":6,"y2":7},"originX":714.75,"originY":0}',
            '{"characterWidth":10,"characterHeight":10,"ascender":11,"descender":-3,"textWidth":369,"textHeight":42,"maxHorizontalAdvance":13,"boundingBox":{"x1":0,"y1":0,"x2":6,"y2":8},"originX":368.25,"originY":0}',
            '{"characterWidth":12,"characterHeight":12,"ascender":13,"descender":-3,"textWidth":432.5,"textHeight":48,"maxHorizontalAdvance":15,"boundingBox":{"x1":-0.5,"y1":0,"x2":8,"y2":9},"originX":432.25,"originY":0}',
            '{"characterWidth":14,"characterHeight":14,"ascender":15,"descender":-3,"textWidth":487,"textHeight":54,"maxHorizontalAdvance":18,"boundingBox":{"x1":0,"y1":0,"x2":9,"y2":11},"originX":486.25,"originY":0}',
            '{"characterWidth":15,"characterHeight":15,"ascender":16,"descender":-4,"textWidth":515.5,"textHeight":60,"maxHorizontalAdvance":19,"boundingBox":{"x1":-0.5,"y1":0,"x2":10,"y2":12},"originX":514.25,"originY":0}',
            '{"characterWidth":16,"characterHeight":16,"ascender":17,"descender":-4,"textWidth":550,"textHeight":63,"maxHorizontalAdvance":21,"boundingBox":{"x1":-1,"y1":0,"x2":10,"y2":13},"originX":548.25,"originY":0}',
            '{"characterWidth":17,"characterHeight":17,"ascender":18,"descender":-4,"textWidth":581,"textHeight":66,"maxHorizontalAdvance":22,"boundingBox":{"x1":0,"y1":0,"x2":11,"y2":13},"originX":580.25,"originY":0}',
            '{"characterWidth":18,"characterHeight":18,"ascender":19,"descender":-4,"textWidth":605,"textHeight":69,"maxHorizontalAdvance":23,"boundingBox":{"x1":0,"y1":0,"x2":12,"y2":14},"originX":604.25,"originY":0}',
            '{"characterWidth":19,"characterHeight":19,"ascender":20,"descender":-5,"textWidth":423.5,"textHeight":100,"maxHorizontalAdvance":24,"boundingBox":{"x1":-0.5,"y1":0,"x2":14,"y2":15},"originX":423.75,"originY":0}',
            '{"characterWidth":21,"characterHeight":21,"ascender":22,"descender":-5,"textWidth":470,"textHeight":108,"maxHorizontalAdvance":27,"boundingBox":{"x1":0,"y1":0,"x2":13,"y2":17},"originX":470.25,"originY":0}',
            '{"characterWidth":23,"characterHeight":23,"ascender":24,"descender":-5,"textWidth":518.5,"textHeight":116,"maxHorizontalAdvance":30,"boundingBox":{"x1":-0.5,"y1":0,"x2":14,"y2":18},"originX":518.25,"originY":0}',
            '{"characterWidth":24,"characterHeight":24,"ascender":25,"descender":-6,"textWidth":526,"textHeight":124,"maxHorizontalAdvance":31,"boundingBox":{"x1":0,"y1":0,"x2":15,"y2":19},"originX":526.25,"originY":0}',
            '{"characterWidth":25,"characterHeight":25,"ascender":26,"descender":-6,"textWidth":548,"textHeight":128,"maxHorizontalAdvance":32,"boundingBox":{"x1":0,"y1":0,"x2":16,"y2":20},"originX":548.25,"originY":0}',
            '{"characterWidth":26,"characterHeight":26,"ascender":27,"descender":-6,"textWidth":568.5,"textHeight":132,"maxHorizontalAdvance":33,"boundingBox":{"x1":-0.5,"y1":0,"x2":17,"y2":21},"originX":568.25,"originY":0}',
            '{"characterWidth":27,"characterHeight":27,"ascender":28,"descender":-6,"textWidth":598.5,"textHeight":136,"maxHorizontalAdvance":35,"boundingBox":{"x1":-0.5,"y1":0,"x2":17,"y2":21},"originX":598.25,"originY":0}',
            '{"characterWidth":28,"characterHeight":28,"ascender":29,"descender":-6,"textWidth":485,"textHeight":175,"maxHorizontalAdvance":36,"boundingBox":{"x1":-1,"y1":0,"x2":18,"y2":22},"originX":484.25,"originY":0}',
            '{"characterWidth":29,"characterHeight":29,"ascender":30,"descender":-7,"textWidth":497,"textHeight":185,"maxHorizontalAdvance":37,"boundingBox":{"x1":-1,"y1":0,"x2":19,"y2":23},"originX":496.25,"originY":0}',
            '{"characterWidth":30,"characterHeight":30,"ascender":31,"descender":-7,"textWidth":511.5,"textHeight":190,"maxHorizontalAdvance":39,"boundingBox":{"x1":-0.5,"y1":0,"x2":20,"y2":24},"originX":511.25,"originY":0}',
            '{"characterWidth":31,"characterHeight":31,"ascender":32,"descender":-7,"textWidth":529.5,"textHeight":195,"maxHorizontalAdvance":40,"boundingBox":{"x1":-0.5,"y1":0,"x2":20,"y2":25},"originX":529.25,"originY":0}',
            '{"characterWidth":32,"characterHeight":32,"ascender":33,"descender":-7,"textWidth":548,"textHeight":200,"maxHorizontalAdvance":41,"boundingBox":{"x1":-1,"y1":0,"x2":21,"y2":25},"originX":547.25,"originY":0}',
            '{"characterWidth":33,"characterHeight":33,"ascender":34,"descender":-7,"textWidth":565,"textHeight":205,"maxHorizontalAdvance":42,"boundingBox":{"x1":-1,"y1":0,"x2":22,"y2":26},"originX":564.25,"originY":0}',
            '{"characterWidth":34,"characterHeight":34,"ascender":35,"descender":-8,"textWidth":580.5,"textHeight":215,"maxHorizontalAdvance":44,"boundingBox":{"x1":-0.5,"y1":0,"x2":22,"y2":27},"originX":580.25,"originY":0}',
            '{"characterWidth":33,"characterHeight":33,"ascender":34,"descender":-7,"textWidth":565,"textHeight":205,"maxHorizontalAdvance":42,"boundingBox":{"x1":-1,"y1":0,"x2":22,"y2":26},"originX":564.25,"originY":0}',
            '{"characterWidth":32,"characterHeight":32,"ascender":33,"descender":-7,"textWidth":548,"textHeight":200,"maxHorizontalAdvance":41,"boundingBox":{"x1":-1,"y1":0,"x2":21,"y2":25},"originX":547.25,"originY":0}',
            '{"characterWidth":31,"characterHeight":31,"ascender":32,"descender":-7,"textWidth":529.5,"textHeight":195,"maxHorizontalAdvance":40,"boundingBox":{"x1":-0.5,"y1":0,"x2":20,"y2":25},"originX":529.25,"originY":0}',
            '{"characterWidth":30,"characterHeight":30,"ascender":31,"descender":-7,"textWidth":511.5,"textHeight":190,"maxHorizontalAdvance":39,"boundingBox":{"x1":-0.5,"y1":0,"x2":20,"y2":24},"originX":511.25,"originY":0}',
            '{"characterWidth":29,"characterHeight":29,"ascender":30,"descender":-7,"textWidth":497,"textHeight":185,"maxHorizontalAdvance":37,"boundingBox":{"x1":-1,"y1":0,"x2":19,"y2":23},"originX":496.25,"originY":0}'
        );

        foreach( $properties as $i => $returnVal )
        {
            $imagick->expects( $this->at( $i + 1 ) )->method( 'queryFontMetrics' )->will(
                $this->returnValue( json_decode( $returnVal, true ) ) );
        }
        $image->setImage( $imagick );

        $object = new Caption( $image, 'I visit kitchens because they are a place that makes me feel comfortable and warm.  they also provide great food that fills me up and keeps me healthy.' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $drawLayer = $object->getDrawLayer();

        $this->assertEquals( $draw, $drawLayer );
        $this->assertEquals( 25, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::getDrawLayer
     * @covers MemePuush\Caption::setDraw
     * @covers MemePuush\Caption::getDraw
     * @covers MemePuush\Caption::setPixel
     * @covers MemePuush\Caption::getPixel
     * @covers MemePuush\Caption::setGravity
     * @covers MemePuush\Caption::getGravity
     * @covers MemePuush\Caption::calculateFontSize
     */
    public function testGetDrawLayerFontSize480x641()
    {
        $image   = new Image();
        $imagick = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 480, 'height' => 641 ) ) );

        $properties = array(
            '{"characterWidth":1,"characterHeight":1,"ascender":2,"descender":-1,"textWidth":18,"textHeight":1,"maxHorizontalAdvance":1,"boundingBox":{"x1":0,"y1":-0.015625,"x2":0.546875,"y2":0.8125},"originX":17.5,"originY":0}',
            '{"characterWidth":20,"characterHeight":20,"ascender":21,"descender":-5,"textWidth":133.5,"textHeight":24,"maxHorizontalAdvance":26,"boundingBox":{"x1":-0.5,"y1":0,"x2":10.5,"y2":16},"originX":133.5,"originY":0}',
            '{"characterWidth":23,"characterHeight":23,"ascender":24,"descender":-5,"textWidth":151.5,"textHeight":28,"maxHorizontalAdvance":30,"boundingBox":{"x1":-0.5,"y1":0,"x2":11.5,"y2":18},"originX":151.5,"originY":0}',
            '{"characterWidth":26,"characterHeight":26,"ascender":27,"descender":-6,"textWidth":165.5,"textHeight":32,"maxHorizontalAdvance":33,"boundingBox":{"x1":-0.5,"y1":0,"x2":13.5,"y2":21},"originX":165.5,"originY":0}',
            '{"characterWidth":29,"characterHeight":29,"ascender":30,"descender":-7,"textWidth":185,"textHeight":35,"maxHorizontalAdvance":37,"boundingBox":{"x1":-1,"y1":0,"x2":15.5,"y2":23},"originX":184.5,"originY":0}',
            '{"characterWidth":31,"characterHeight":31,"ascender":32,"descender":-7,"textWidth":197.5,"textHeight":38,"maxHorizontalAdvance":40,"boundingBox":{"x1":-0.5,"y1":0,"x2":16.5,"y2":25},"originX":197.5,"originY":0}',
            '{"characterWidth":33,"characterHeight":33,"ascender":34,"descender":-7,"textWidth":210,"textHeight":40,"maxHorizontalAdvance":42,"boundingBox":{"x1":-1,"y1":0,"x2":17.5,"y2":26},"originX":209.5,"originY":0}',
            '{"characterWidth":35,"characterHeight":35,"ascender":36,"descender":-8,"textWidth":220.5,"textHeight":43,"maxHorizontalAdvance":45,"boundingBox":{"x1":-0.5,"y1":0,"x2":19.5,"y2":28},"originX":219.5,"originY":0}',
            '{"characterWidth":37,"characterHeight":37,"ascender":38,"descender":-8,"textWidth":235,"textHeight":45,"maxHorizontalAdvance":48,"boundingBox":{"x1":0,"y1":0,"x2":20.5,"y2":29},"originX":234.5,"originY":0}',
            '{"characterWidth":39,"characterHeight":39,"ascender":40,"descender":-9,"textWidth":246.5,"textHeight":48,"maxHorizontalAdvance":50,"boundingBox":{"x1":-0.5,"y1":0,"x2":21.5,"y2":31},"originX":245.5,"originY":0}',
            '{"characterWidth":41,"characterHeight":41,"ascender":42,"descender":-9,"textWidth":259,"textHeight":50,"maxHorizontalAdvance":53,"boundingBox":{"x1":0,"y1":0,"x2":22.5,"y2":32},"originX":258.5,"originY":0}',
            '{"characterWidth":43,"characterHeight":43,"ascender":44,"descender":-10,"textWidth":271,"textHeight":52,"maxHorizontalAdvance":55,"boundingBox":{"x1":-1,"y1":0,"x2":23.5,"y2":34},"originX":269.5,"originY":0}',
            '{"characterWidth":45,"characterHeight":45,"ascender":46,"descender":-10,"textWidth":282.5,"textHeight":55,"maxHorizontalAdvance":58,"boundingBox":{"x1":-1.5,"y1":-1,"x2":23.5,"y2":37},"originX":281.5,"originY":0}',
            '{"characterWidth":47,"characterHeight":47,"ascender":48,"descender":-10,"textWidth":293,"textHeight":57,"maxHorizontalAdvance":60,"boundingBox":{"x1":-1,"y1":-1,"x2":25.5,"y2":38},"originX":291.5,"originY":0}',
            '{"characterWidth":49,"characterHeight":49,"ascender":50,"descender":-11,"textWidth":307.5,"textHeight":60,"maxHorizontalAdvance":63,"boundingBox":{"x1":-1.5,"y1":-1,"x2":25.5,"y2":40},"originX":306.5,"originY":0}',
            '{"characterWidth":51,"characterHeight":51,"ascender":52,"descender":-11,"textWidth":319,"textHeight":62,"maxHorizontalAdvance":66,"boundingBox":{"x1":-1,"y1":-1,"x2":27.5,"y2":41},"originX":317.5,"originY":0}',
            '{"characterWidth":53,"characterHeight":53,"ascender":54,"descender":-12,"textWidth":329.5,"textHeight":65,"maxHorizontalAdvance":68,"boundingBox":{"x1":-0.5,"y1":-1,"x2":29.5,"y2":43},"originX":327.5,"originY":0}',
            '{"characterWidth":55,"characterHeight":55,"ascender":56,"descender":-12,"textWidth":345,"textHeight":67,"maxHorizontalAdvance":71,"boundingBox":{"x1":-1,"y1":-1,"x2":30.5,"y2":44},"originX":343.5,"originY":0}',
            '{"characterWidth":57,"characterHeight":57,"ascender":58,"descender":-13,"textWidth":357.5,"textHeight":70,"maxHorizontalAdvance":73,"boundingBox":{"x1":-0.5,"y1":-1,"x2":32.5,"y2":46},"originX":355.5,"originY":0}',
            '{"characterWidth":59,"characterHeight":59,"ascender":60,"descender":-13,"textWidth":367,"textHeight":72,"maxHorizontalAdvance":76,"boundingBox":{"x1":-1,"y1":-1,"x2":32.5,"y2":48},"originX":365.5,"originY":0}'
        );

        foreach( $properties as $i => $returnVal )
        {
            $imagick->expects( $this->at( $i + 1 ) )->method( 'queryFontMetrics' )->will(
                $this->returnValue( json_decode( $returnVal, true ) ) );
        }

        $image->setImage( $imagick );

        $object = new Caption( $image, 'I played a team' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $drawLayer = $object->getDrawLayer();

        $this->assertEquals( $draw, $drawLayer );
        $this->assertEquals( 59, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::getDrawLayer
     * @covers MemePuush\Caption::setDraw
     * @covers MemePuush\Caption::getDraw
     * @covers MemePuush\Caption::setPixel
     * @covers MemePuush\Caption::getPixel
     * @covers MemePuush\Caption::setGravity
     * @covers MemePuush\Caption::getGravity
     * @covers MemePuush\Caption::calculateFontSize
     */
    public function testGetDrawLayerFontSize283x445wordWrap()
    {
        $image   = new Image();
        $imagick = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 283, 'height' => 445 ) ) );

        $properties = array(
            '{"characterWidth":1,"characterHeight":1,"ascender":2,"descender":-1,"textWidth":79,"textHeight":1,"maxHorizontalAdvance":1,"boundingBox":{"x1":0,"y1":-0.015625,"x2":0.8125,"y2":0.8125},"originX":79.25,"originY":0}',
            '{"characterWidth":3,"characterHeight":3,"ascender":4,"descender":-1,"textWidth":139.015625,"textHeight":4,"maxHorizontalAdvance":4,"boundingBox":{"x1":-0.015625,"y1":-0.046875,"x2":2.4375,"y2":2.421875},"originX":139.25,"originY":0}',
            '{"characterWidth":5,"characterHeight":5,"ascender":6,"descender":-2,"textWidth":187.03125,"textHeight":6,"maxHorizontalAdvance":6,"boundingBox":{"x1":-0.03125,"y1":-0.078125,"x2":4.078125,"y2":4.03125},"originX":187.25,"originY":0}',
            '{"characterWidth":7,"characterHeight":7,"ascender":8,"descender":-2,"textWidth":240.046875,"textHeight":9,"maxHorizontalAdvance":9,"boundingBox":{"x1":-0.046875,"y1":-0.109375,"x2":5.703125,"y2":5.65625},"originX":240.25,"originY":0}',
            '{"characterWidth":8,"characterHeight":8,"ascender":9,"descender":-2,"textWidth":249.046875,"textHeight":10,"maxHorizontalAdvance":10,"boundingBox":{"x1":-0.046875,"y1":-0.140625,"x2":6.515625,"y2":6.453125},"originX":248.25,"originY":0}',
            '{"characterWidth":9,"characterHeight":9,"ascender":10,"descender":-2,"textWidth":298,"textHeight":11,"maxHorizontalAdvance":12,"boundingBox":{"x1":0,"y1":0,"x2":6,"y2":7},"originX":298.25,"originY":0}',
            '{"characterWidth":10,"characterHeight":10,"ascender":11,"descender":-3,"textWidth":311,"textHeight":12,"maxHorizontalAdvance":13,"boundingBox":{"x1":0,"y1":0,"x2":7,"y2":8},"originX":311.25,"originY":0}',
            '{"characterWidth":11,"characterHeight":11,"ascender":12,"descender":-3,"textWidth":153,"textHeight":45,"maxHorizontalAdvance":14,"boundingBox":{"x1":-1,"y1":0,"x2":8,"y2":9},"originX":152.25,"originY":0}',
            '{"characterWidth":13,"characterHeight":13,"ascender":14,"descender":-3,"textWidth":176,"textHeight":51,"maxHorizontalAdvance":17,"boundingBox":{"x1":0,"y1":0,"x2":10,"y2":10},"originX":176.25,"originY":0}',
            '{"characterWidth":15,"characterHeight":15,"ascender":16,"descender":-4,"textWidth":198.5,"textHeight":60,"maxHorizontalAdvance":19,"boundingBox":{"x1":-0.5,"y1":0,"x2":11,"y2":12},"originX":198.25,"originY":0}',
            '{"characterWidth":17,"characterHeight":17,"ascender":18,"descender":-4,"textWidth":222,"textHeight":66,"maxHorizontalAdvance":22,"boundingBox":{"x1":0,"y1":0,"x2":13,"y2":13},"originX":222.25,"originY":0}',
            '{"characterWidth":18,"characterHeight":18,"ascender":19,"descender":-4,"textWidth":234,"textHeight":69,"maxHorizontalAdvance":23,"boundingBox":{"x1":0,"y1":0,"x2":14,"y2":14},"originX":234.25,"originY":0}',
            '{"characterWidth":19,"characterHeight":19,"ascender":20,"descender":-5,"textWidth":244.5,"textHeight":75,"maxHorizontalAdvance":24,"boundingBox":{"x1":-0.5,"y1":0,"x2":14,"y2":15},"originX":244.25,"originY":0}',
            '{"characterWidth":20,"characterHeight":20,"ascender":21,"descender":-5,"textWidth":262.5,"textHeight":78,"maxHorizontalAdvance":26,"boundingBox":{"x1":-0.5,"y1":0,"x2":15,"y2":16},"originX":262.25,"originY":0}',
            '{"characterWidth":21,"characterHeight":21,"ascender":22,"descender":-5,"textWidth":272,"textHeight":81,"maxHorizontalAdvance":27,"boundingBox":{"x1":0,"y1":0,"x2":15,"y2":17},"originX":272.25,"originY":0}'
        );

        foreach( $properties as $i => $returnVal )
        {
            $imagick->expects( $this->at( $i + 1 ) )->method( 'queryFontMetrics' )->will(
                $this->returnValue( json_decode( $returnVal, true ) ) );
        }

        $image->setImage( $imagick );

        $object = new Caption( $image, 'it\'s a long description with lots of words and word wrapping' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $drawLayer = $object->getDrawLayer();

        $this->assertEquals( $draw, $drawLayer );
        $this->assertEquals( 19, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::annotateImage
     */
    public function testAnnotateImage()
    {
        $image   = new Image();
        $imagick = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics', 'annotateImage' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 283, 'height' => 445 ) ) );

        $properties = array(
            '{"characterWidth":1,"characterHeight":1,"ascender":2,"descender":-1,"textWidth":79,"textHeight":1,"maxHorizontalAdvance":1,"boundingBox":{"x1":0,"y1":-0.015625,"x2":0.8125,"y2":0.8125},"originX":79.25,"originY":0}',
            '{"characterWidth":3,"characterHeight":3,"ascender":4,"descender":-1,"textWidth":139.015625,"textHeight":4,"maxHorizontalAdvance":4,"boundingBox":{"x1":-0.015625,"y1":-0.046875,"x2":2.4375,"y2":2.421875},"originX":139.25,"originY":0}',
            '{"characterWidth":5,"characterHeight":5,"ascender":6,"descender":-2,"textWidth":187.03125,"textHeight":6,"maxHorizontalAdvance":6,"boundingBox":{"x1":-0.03125,"y1":-0.078125,"x2":4.078125,"y2":4.03125},"originX":187.25,"originY":0}',
            '{"characterWidth":7,"characterHeight":7,"ascender":8,"descender":-2,"textWidth":240.046875,"textHeight":9,"maxHorizontalAdvance":9,"boundingBox":{"x1":-0.046875,"y1":-0.109375,"x2":5.703125,"y2":5.65625},"originX":240.25,"originY":0}',
            '{"characterWidth":8,"characterHeight":8,"ascender":9,"descender":-2,"textWidth":249.046875,"textHeight":10,"maxHorizontalAdvance":10,"boundingBox":{"x1":-0.046875,"y1":-0.140625,"x2":6.515625,"y2":6.453125},"originX":248.25,"originY":0}',
            '{"characterWidth":9,"characterHeight":9,"ascender":10,"descender":-2,"textWidth":298,"textHeight":11,"maxHorizontalAdvance":12,"boundingBox":{"x1":0,"y1":0,"x2":6,"y2":7},"originX":298.25,"originY":0}',
            '{"characterWidth":10,"characterHeight":10,"ascender":11,"descender":-3,"textWidth":311,"textHeight":12,"maxHorizontalAdvance":13,"boundingBox":{"x1":0,"y1":0,"x2":7,"y2":8},"originX":311.25,"originY":0}',
            '{"characterWidth":11,"characterHeight":11,"ascender":12,"descender":-3,"textWidth":153,"textHeight":45,"maxHorizontalAdvance":14,"boundingBox":{"x1":-1,"y1":0,"x2":8,"y2":9},"originX":152.25,"originY":0}',
            '{"characterWidth":13,"characterHeight":13,"ascender":14,"descender":-3,"textWidth":176,"textHeight":51,"maxHorizontalAdvance":17,"boundingBox":{"x1":0,"y1":0,"x2":10,"y2":10},"originX":176.25,"originY":0}',
            '{"characterWidth":15,"characterHeight":15,"ascender":16,"descender":-4,"textWidth":198.5,"textHeight":60,"maxHorizontalAdvance":19,"boundingBox":{"x1":-0.5,"y1":0,"x2":11,"y2":12},"originX":198.25,"originY":0}',
            '{"characterWidth":17,"characterHeight":17,"ascender":18,"descender":-4,"textWidth":222,"textHeight":66,"maxHorizontalAdvance":22,"boundingBox":{"x1":0,"y1":0,"x2":13,"y2":13},"originX":222.25,"originY":0}',
            '{"characterWidth":18,"characterHeight":18,"ascender":19,"descender":-4,"textWidth":234,"textHeight":69,"maxHorizontalAdvance":23,"boundingBox":{"x1":0,"y1":0,"x2":14,"y2":14},"originX":234.25,"originY":0}',
            '{"characterWidth":19,"characterHeight":19,"ascender":20,"descender":-5,"textWidth":244.5,"textHeight":75,"maxHorizontalAdvance":24,"boundingBox":{"x1":-0.5,"y1":0,"x2":14,"y2":15},"originX":244.25,"originY":0}',
            '{"characterWidth":20,"characterHeight":20,"ascender":21,"descender":-5,"textWidth":262.5,"textHeight":78,"maxHorizontalAdvance":26,"boundingBox":{"x1":-0.5,"y1":0,"x2":15,"y2":16},"originX":262.25,"originY":0}',
            '{"characterWidth":21,"characterHeight":21,"ascender":22,"descender":-5,"textWidth":272,"textHeight":81,"maxHorizontalAdvance":27,"boundingBox":{"x1":0,"y1":0,"x2":15,"y2":17},"originX":272.25,"originY":0}'
        );

        foreach( $properties as $i => $returnVal )
        {
            $imagick->expects( $this->at( $i + 1 ) )->method( 'queryFontMetrics' )->will(
                $this->returnValue( json_decode( $returnVal, true ) ) );
        }

        $image->setImage( $imagick );

        $object = new Caption( $image, 'it\'s a long description with lots of words and word wrapping' );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeAntialias', 'setStrokeAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $object->annotateImage();

        $this->assertEquals( 19, $object->getFontSize() );
    }

    /**
     * @covers MemePuush\Caption::annotateImage
     */
    public function testAnnotateImageDebug()
    {
        $image   = new Image();
        $imagick = $this->getMock( 'Imagick', array( 'getImageGeometry', 'queryFontMetrics', 'annotateImage', 'drawImage' ), array() );
        $imagick->expects( $this->any() )->method( 'getImageGeometry' )->will( $this->returnValue( array( 'width' => 283, 'height' => 445 ) ) );

        $properties = array(
            '{"characterWidth":1,"characterHeight":1,"ascender":2,"descender":-1,"textWidth":79,"textHeight":1,"maxHorizontalAdvance":1,"boundingBox":{"x1":0,"y1":-0.015625,"x2":0.8125,"y2":0.8125},"originX":79.25,"originY":0}',
            '{"characterWidth":3,"characterHeight":3,"ascender":4,"descender":-1,"textWidth":139.015625,"textHeight":4,"maxHorizontalAdvance":4,"boundingBox":{"x1":-0.015625,"y1":-0.046875,"x2":2.4375,"y2":2.421875},"originX":139.25,"originY":0}',
            '{"characterWidth":5,"characterHeight":5,"ascender":6,"descender":-2,"textWidth":187.03125,"textHeight":6,"maxHorizontalAdvance":6,"boundingBox":{"x1":-0.03125,"y1":-0.078125,"x2":4.078125,"y2":4.03125},"originX":187.25,"originY":0}',
            '{"characterWidth":7,"characterHeight":7,"ascender":8,"descender":-2,"textWidth":240.046875,"textHeight":9,"maxHorizontalAdvance":9,"boundingBox":{"x1":-0.046875,"y1":-0.109375,"x2":5.703125,"y2":5.65625},"originX":240.25,"originY":0}',
            '{"characterWidth":8,"characterHeight":8,"ascender":9,"descender":-2,"textWidth":249.046875,"textHeight":10,"maxHorizontalAdvance":10,"boundingBox":{"x1":-0.046875,"y1":-0.140625,"x2":6.515625,"y2":6.453125},"originX":248.25,"originY":0}',
            '{"characterWidth":9,"characterHeight":9,"ascender":10,"descender":-2,"textWidth":298,"textHeight":11,"maxHorizontalAdvance":12,"boundingBox":{"x1":0,"y1":0,"x2":6,"y2":7},"originX":298.25,"originY":0}',
            '{"characterWidth":10,"characterHeight":10,"ascender":11,"descender":-3,"textWidth":311,"textHeight":12,"maxHorizontalAdvance":13,"boundingBox":{"x1":0,"y1":0,"x2":7,"y2":8},"originX":311.25,"originY":0}',
            '{"characterWidth":11,"characterHeight":11,"ascender":12,"descender":-3,"textWidth":153,"textHeight":45,"maxHorizontalAdvance":14,"boundingBox":{"x1":-1,"y1":0,"x2":8,"y2":9},"originX":152.25,"originY":0}',
            '{"characterWidth":13,"characterHeight":13,"ascender":14,"descender":-3,"textWidth":176,"textHeight":51,"maxHorizontalAdvance":17,"boundingBox":{"x1":0,"y1":0,"x2":10,"y2":10},"originX":176.25,"originY":0}',
            '{"characterWidth":15,"characterHeight":15,"ascender":16,"descender":-4,"textWidth":198.5,"textHeight":60,"maxHorizontalAdvance":19,"boundingBox":{"x1":-0.5,"y1":0,"x2":11,"y2":12},"originX":198.25,"originY":0}',
            '{"characterWidth":17,"characterHeight":17,"ascender":18,"descender":-4,"textWidth":222,"textHeight":66,"maxHorizontalAdvance":22,"boundingBox":{"x1":0,"y1":0,"x2":13,"y2":13},"originX":222.25,"originY":0}',
            '{"characterWidth":18,"characterHeight":18,"ascender":19,"descender":-4,"textWidth":234,"textHeight":69,"maxHorizontalAdvance":23,"boundingBox":{"x1":0,"y1":0,"x2":14,"y2":14},"originX":234.25,"originY":0}',
            '{"characterWidth":19,"characterHeight":19,"ascender":20,"descender":-5,"textWidth":244.5,"textHeight":75,"maxHorizontalAdvance":24,"boundingBox":{"x1":-0.5,"y1":0,"x2":14,"y2":15},"originX":244.25,"originY":0}',
            '{"characterWidth":20,"characterHeight":20,"ascender":21,"descender":-5,"textWidth":262.5,"textHeight":78,"maxHorizontalAdvance":26,"boundingBox":{"x1":-0.5,"y1":0,"x2":15,"y2":16},"originX":262.25,"originY":0}',
            '{"characterWidth":21,"characterHeight":21,"ascender":22,"descender":-5,"textWidth":272,"textHeight":81,"maxHorizontalAdvance":27,"boundingBox":{"x1":0,"y1":0,"x2":15,"y2":17},"originX":272.25,"originY":0}'
        );

        foreach( $properties as $i => $returnVal )
        {
            $imagick->expects( $this->at( $i + 1 ) )->method( 'queryFontMetrics' )->will(
                $this->returnValue( json_decode( $returnVal, true ) ) );
        }

        $image->setImage( $imagick );

        $object = new Caption( $image, 'it\'s a long description with lots of words and word wrapping' );

        $object->setDebug( true );

        $draw = $this->getMock(
            'ImagickDraw',
            array(
                 'setFont', 'setFontSize',
                 'setStrokeColor', 'setStrokeWidth', 'setStrokeAntialias', 'setStrokeAlpha', 'setFillAlpha',
                 'setTextAntialias', 'setTextAlignment', 'setTextKerning', 'setGravity', 'setFillColor',
                 'rectangle'
            ),
            array()
        );
        $object->setDraw( $draw );

        $pixel = $this->getMock( 'ImagickPixel' );
        $object->setPixel( $pixel );

        $object->setGravity( 2 );

        $object->annotateImage();

        $this->assertEquals( 19, $object->getFontSize() );
    }
}
